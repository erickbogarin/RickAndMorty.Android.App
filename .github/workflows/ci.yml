name: Android CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    env:
      JAVA_VERSION: 17

    steps:
      # Checkout do código
      - name: Checkout source
        uses: actions/checkout@v4

      # Configurar JDK
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      # Configurar cache do Gradle
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Habilitar KVM para aceleração de hardware
      - name: Enable KVM
        run: |
          echo 'KERNEL=="kvm", GROUP="kvm", MODE="0666", OPTIONS+="static_node=kvm"' | sudo tee /etc/udev/rules.d/99-kvm4all.rules
          sudo udevadm control --reload-rules
          sudo udevadm trigger --name-match=kvm

      # Tornar gradlew executável
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Verificar formatação do código
      - name: Check Code Formatting
        run: ./gradlew spotlessCheck

      # Executar análise estática
      - name: Run Static Analysis
        run: ./gradlew detekt

      # Executar Lint
      - name: Run Lint
        run: ./gradlew lint

      # Executar testes unitários com cobertura
      - name: Run Unit Tests with Coverage
        run: ./gradlew testDebugUnitTest jacocoTestReport --stacktrace

      # Upload do relatório de cobertura
      - name: Upload Coverage Report
        if: always() # Run even if tests fail
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: app/build/reports/jacoco/html # Updated to match build.gradle.kts

      # Construir projeto
      - name: Build project
        run: ./gradlew assembleDebug

      # Construir APK de teste
      - name: Build AndroidTest APK
        run: ./gradlew assembleAndroidTest

      # Executar testes instrumentados no emulador
      - name: Run Instrumentation Tests
        uses: reactivecircus/android-emulator-runner@v2
        with:
          api-level: 30
          target: google_apis
          arch: x86_64
          profile: pixel_4
          emulator-options: -no-window -no-audio -no-boot-anim -no-snapshot
          emulator-boot-timeout: 600
          disable-animations: true
          script: ./gradlew connectedCheck --stacktrace

      # Upload do relatório de testes
      - name: Upload Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: app/build/reports/androidTests/connected/

      # Upload do APK
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # Parar daemons do Gradle
      - name: Reclaim Gradle Daemons
        run: ./gradlew --stop

      # Verificações finais
      - name: Final Checks
        run: ./gradlew check --stacktrace