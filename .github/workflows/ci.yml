name: Android CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ADB_INSTALL_TIMEOUT: 20
      JAVA_VERSION: 17

    steps:
      # Checkout do código fonte
      - name: Checkout source
        uses: actions/checkout@v4

      # Configuração do JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # ou 'zulu', 'corretto', etc
          java-version: ${{ env.JAVA_VERSION }}

      # Configuração do Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      # Tornar o gradlew executável
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Cache do Gradle para otimizar os tempos de build
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Construção do projeto
      - name: Build project
        run: ./gradlew assembleDebug

      # Construção do APK de testes Android
      - name: Build AndroidTest APK
        run: ./gradlew assembleAndroidTest

      # Criar o AVD e iniciar o emulador
      - name: Create AVD and start emulator
        run: |
          echo "no" | avdmanager create avd -n test -k "system-images;android-30;default;x86_64" --force
          emulator -avd test -no-audio -no-window -gpu swiftshader_indirect -no-snapshot &
          adb wait-for-device
          adb shell input keyevent 82
        env:
          ANDROID_SDK_ROOT: ${{ env.ANDROID_HOME }}

      # Rodar os testes de instrumentação
      - name: Run Instrumentation Tests
        run: ./gradlew connectedCheck --stacktrace

      # Rodar a análise de código estático com Detekt
      - name: Run Static Analysis
        run: ./gradlew detekt

      # Verificar formatação de código com Spotless
      - name: Check Code Formatting
        run: ./gradlew spotlessCheck

      # Rodar Lint
      - name: Run Lint
        run: ./gradlew lint

      # Rodar os testes unitários com cobertura de código
      - name: Run Unit Tests with Coverage
        run: ./gradlew testDebugUnitTest jacocoTestReport

      # Gerar o relatório de cobertura de testes
      - name: Generate Test Coverage Report
        run: ./gradlew jacocoTestReport

      # Fazer o upload do relatório de cobertura
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: app/build/reports/jacoco/jacocoTestReport/html

      # Fazer o upload do APK gerado
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # Finalizar os daemons do Gradle
      - name: Reclaim Gradle Daemons
        run: ./gradlew --stop

      # Rodar verificações finais (ajuda a garantir que tudo esteja em ordem)
      - name: Final Checks
        run: ./gradlew check --stacktrace
