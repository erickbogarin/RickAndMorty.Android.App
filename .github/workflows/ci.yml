name: Android CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15

    env:
      JAVA_VERSION: 17
      AVD_NAME: test
      API_LEVEL: 30
      ABI: x86_64
      TAG: default

    steps:
      - name: Checkout source
        uses: actions/checkout@v4

      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: ${{ env.JAVA_VERSION }}

      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      - name: Accept licenses
        run: yes | sdkmanager --licenses

      - name: Update SDK tools
        run: sdkmanager --update

      - name: Make gradlew executable
        run: chmod +x ./gradlew

      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      - name: Check Code Formatting
        run: ./gradlew spotlessCheck

      - name: Run Static Analysis
        run: ./gradlew detekt

      - name: Run Lint
        run: ./gradlew lint

      - name: Run Unit Tests with Coverage
        run: ./gradlew testDebugUnitTest jacocoTestReport

      - name: Generate Test Coverage Report
        run: ./gradlew jacocoTestReport

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: app/build/reports/jacoco/jacocoTestReport/html

      - name: Build project
        run: ./gradlew assembleDebug

      - name: Build AndroidTest APK
        run: ./gradlew assembleAndroidTest

      - name: Kill old emulator processes
        run: |
          adb kill-server || true
          pkill -f emulator || true

      - name: Install system image for AVD
        run: |
          sdkmanager "system-images;android-${{ env.API_LEVEL }};${{ env.TAG }};${{ env.ABI }}"
          sdkmanager --list | grep "system-images;android-${{ env.API_LEVEL }};${{ env.TAG }};${{ env.ABI }}" || {
            echo "::error ::System image not found after install."
            exit 1
          }

      - name: Create AVD
        run: |
          echo "no" | avdmanager create avd -n ${{ env.AVD_NAME }} -k "system-images;android-${{ env.API_LEVEL }};${{ env.TAG }};${{ env.ABI }}" --force

      - name: Start emulator
        run: |
          $ANDROID_HOME/emulator/emulator -avd ${{ env.AVD_NAME }} -no-window -no-audio -no-boot-anim -gpu swiftshader_indirect -verbose -no-snapshot &
          sleep 5
          pgrep emulator || { echo "::error ::Emulator process not running."; exit 1; }

      - name: Wait for emulator to boot
        run: |
          adb wait-for-device
          boot_completed=""
          timeout=900
          while [[ "$boot_completed" != "1" && $timeout -gt 0 ]]; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            echo "Waiting for boot... $timeout seconds left"
            sleep 5
            timeout=$((timeout - 5))
          done
          if [[ "$boot_completed" != "1" ]]; then
            echo "::error ::Emulator failed to boot."
            adb devices
            adb logcat -d || true
            exit 1
          fi
          echo "âœ… Emulator booted successfully."
          adb shell input keyevent 82

      - name: Print emulator info
        run: adb shell getprop | grep version

      - name: Run Instrumentation Tests
        run: ./gradlew connectedCheck --stacktrace

      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      - name: Reclaim Gradle Daemons
        run: ./gradlew --stop

      - name: Final Checks
        run: ./gradlew check --stacktrace
