name: Android CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  build:
    runs-on: ubuntu-latest

    env:
      ADB_INSTALL_TIMEOUT: 20
      JAVA_VERSION: 17

    steps:
      # Checkout do c√≥digo fonte
      - name: Checkout source
        uses: actions/checkout@v4

      # Configura√ß√£o do JDK
      - name: Set up JDK
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # ou 'zulu', 'corretto', etc
          java-version: ${{ env.JAVA_VERSION }}

      # Configura√ß√£o do Android SDK
      - name: Set up Android SDK
        uses: android-actions/setup-android@v2

      # Tornar o gradlew execut√°vel
      - name: Make gradlew executable
        run: chmod +x ./gradlew

      # Cache do Gradle para otimizar os tempos de build
      - name: Cache Gradle
        uses: actions/cache@v4
        with:
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          key: gradle-${{ runner.os }}-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys: |
            gradle-${{ runner.os }}-

      # Verificar a formata√ß√£o de c√≥digo com Spotless
      - name: Check Code Formatting
        run: ./gradlew spotlessCheck

      # Rodar an√°lise est√°tica com Detekt
      - name: Run Static Analysis
        run: ./gradlew detekt

      # Rodar Lint
      - name: Run Lint
        run: ./gradlew lint

      # Rodar os testes unit√°rios com cobertura de c√≥digo
      - name: Run Unit Tests with Coverage
        run: ./gradlew testDebugUnitTest jacocoTestReport

      # Gerar o relat√≥rio de cobertura de testes
      - name: Generate Test Coverage Report
        run: ./gradlew jacocoTestReport

      # Fazer o upload do relat√≥rio de cobertura
      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: app/build/reports/jacoco/jacocoTestReport/html

      # Constru√ß√£o do APK
      - name: Build project
        run: ./gradlew assembleDebug

      # Constru√ß√£o do APK de testes Android
      - name: Build AndroidTest APK
        run: ./gradlew assembleAndroidTest

       # Criar e baixar as imagens de sistema necess√°rias para o emulador
      - name: Install system image for AVD
        run: |
          sdkmanager "system-images;android-30;default;x86_64"
          sdkmanager --list # Verifique se a imagem foi instalada corretamente
        
      - name: Accept licenses
        run: yes | sdkmanager --licenses

      - name: Create AVD and start emulator
        run: |
          echo "üì¶ Installing system image..."
          sdkmanager "system-images;android-30;default;x86_64"

          echo "üõ†Ô∏è Creating AVD..."
          echo "no" | avdmanager create avd -n test -k "system-images;android-30;default;x86_64" --force

          echo "üöÄ Starting emulator..."
          emulator -avd test -no-audio -no-window -gpu swiftshader_indirect -snapshot mySnapshot &

          echo "‚åõ Waiting for emulator to boot (timeout: 15 min)..."
          boot_completed=""

          for i in {1..900}; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            if [[ "$boot_completed" == "1" ]]; then
              echo "‚úÖ Emulator booted successfully!"
              break
            fi
            if (( $i % 30 == 0 )); then
              echo "‚è≥ Still waiting... $i seconds"
              adb devices
            fi
            sleep 1
          done

          if [[ "$boot_completed" != "1" ]]; then
            echo "‚ùå Emulator failed to boot. Timeout reached."
            adb devices
            emulator -list-avds
            ps aux | grep emulator
            exit 1
          fi

          echo "üì± Sending unlock keyevent..."
          adb shell input keyevent 82


      # Rodar os testes de instrumenta√ß√£o
      - name: Run Instrumentation Tests
        run: ./gradlew connectedCheck --stacktrace

      # Fazer o upload do APK gerado
      - name: Upload APK
        uses: actions/upload-artifact@v4
        with:
          name: app-debug.apk
          path: app/build/outputs/apk/debug/app-debug.apk

      # Reivindicar daemons do Gradle
      - name: Reclaim Gradle Daemons
        run: ./gradlew --stop

      # Rodar verifica√ß√µes finais (ajuda a garantir que tudo esteja em ordem)
      - name: Final Checks
        run: ./gradlew check --stacktrace
